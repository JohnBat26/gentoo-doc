<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<article xmlns="http://docbook.org/ns/docbook"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<info><title>Hardware 3D Acceleration Guide (Англ.)</title></info>
<para>Ссылка на оригинал: <link xlink:href="http://www.gentoo.org/doc/en/dri-howto.xml">http://www.gentoo.org/doc/en/dri-howto.xml</link>
</para>
<para>С версии: 1.0</para>
<para/><section><info><title>1. Introduction</title></info>
<para/>
<para>What is hardware 3D acceleration and why do I want it?</para>
<para/>
<para>With hardware 3D acceleration, three-dimensional rendering uses the graphics processor on your video card instead of taking up valuable CPU resources drawing 3D images. It's also referred to as "hardware acceleration" instead of "software acceleration" because without this 3D acceleration your CPU is forced to draw everything itself using the Mesa software rendering libraries, which takes up quite a bit of processing power. While Xorg typically supports 2D hardware acceleration, it often lacks hardware 3D acceleration. Three-dimensional hardware acceleration is valuable in situations requiring rendering of 3D objects such as games, 3D CAD and modeling. </para>
<para/>
<para>How do I get hardware 3D acceleration?</para>
<para/>
<para>In many cases, both binary and open-source drivers exist. Open-source drivers are preferable since we're using Linux and open source is one of its underlying principles. Sometimes, binary drivers are the only option, like with nVidia's cards. Binary drivers include x11-drivers/nvidia-drivers and x11-drivers/nvidia-legacy-drivers for nVidia cards and media-video/ati-drivers for ATI cards. Other open-source drivers include media-video/kyro-kernel for KyroII cards and media-video/ati-gatos for ATI cards, which aim to support ATI's video capabilities more fully. </para>
<para/>
<para>What is DRI?</para>
<para/>
<para>The Direct Rendering Infrastructure, also known as the DRI, is a framework for allowing direct access to graphics hardware in a safe and efficient manner. It includes changes to the X server, to several client libraries and to the kernel. The first major use for the DRI is to create fast OpenGL implementations. </para>
<para/>
<para>What is X11-DRM and how does it relate to regular Xorg?</para>
<para/>
<para>X11-DRM is an enhancement to Xorg that adds 3D acceleration for cards by adding the kernel module necessary for direct rendering. </para>
<para/>
<para>Purpose</para>
<para/>
<para>This guide is for people who can't get direct rendering working with just Xorg. X11-DRM works for 3dfx, gamma, i8x0, matrox, rage128, radeon, mach64 and sis300 series drivers. VIA card owners should not use x11-drm, but should instead use the DRI provided in recent kernels (&gt;2.6.13). See the DRI homepage for more info and documentation. </para>
<para/>
<para>Feedback</para>
<para/>
<para>With suggestions, questions, etc., e-mail Donnie Berkholz. </para>
<para/></section><section><info><title>2. Install Xorg and configure your kernel</title></info>
<para/>
<para>Install Xorg</para>
<para/>
<para>Please read our Xorg Configuration Guide to get Xorg up and running. </para>
<para/>
<para>Configure your kernel</para>
<para/>
<para>Probe for your chipset and enable just that one. </para>
<para/>
<para>Code Listing 2.1: Checking your AGP chipset</para>
<para># emerge pciutils; lspci | grep AGP</para>
<para># 00:01.0 PCI bridge: Intel Corp. 440BX/ZX/DX - 82443BX/ZX/DX AGP bridge (rev 03)</para>
<para>(Your output may not match the above due to different hardware.)</para>
<para/>
<para/>
<para>If your chipset is not supported by the kernel you might have some succes by passing agp=try_unsupported as a kernel parameter. This will use Intel's generic routines for AGP support. To add this parameter, edit your bootloader configuration file! </para>
<para/>
<para>Most, if not all, kernels should have these options. This was configured using gentoo-sources-2.4.20-r5. </para>
<para/>
<para>Code Listing 2.2: Configuring the kernel</para>
<para># ls -l /usr/src/linux </para>
<para>lrwxrwxrwx    1 root     root           22 May 29 18:20 /usr/src/linux -&gt; linux-2.4.20-gentoo-r5</para>
<para>(Make sure /usr/src/linux links to your current kernel.)</para>
<para># cd /usr/src/linux</para>
<para># make menuconfig</para>
<para/>
<para/>
<para>Code Listing 2.3: make menuconfig options</para>
<para>Processor type and features ---&gt;</para>
<para>&lt;*&gt; MTRR (Memory Type Range Register) support</para>
<para>Character devices ---&gt;</para>
<para>&lt;M&gt; /dev/agpgart (AGP Support)</para>
<para>[M] Intel 440LX/BX/GX and I815/I820/I830M/I830MP/I840/I845/I850/I860 support</para>
<para>(Enable your chipset instead of the above.)</para>
<para>&lt; &gt; Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)</para>
<para/>
<para/>
<para>Make sure the Direct Rendering Manager (DRM) is off. The X11-DRM package will provide its own. </para>
<para/>
<para>Compile and install your kernel</para>
<para/>
<para>Code Listing 2.4: Compiling and installing kernel</para>
<para>(This example is for a 2.4 kernel)</para>
<para># make dep &amp;&amp; make clean bzImage modules modules_install</para>
<para># mount /boot</para>
<para># cp arch/i386/boot/bzImage /boot</para>
<para/>
<para/>
<para>If you want your kernel to be named something other than bzImage, be sure to copy to /boot/yourname instead. Don't forget to set up grub.conf or lilo.conf and run /sbin/lilo if you use LILO. </para>
<para/></section><section><info><title>3. Install X11-DRM and configure direct rendering</title></info>
<para/>
<para>Install X11-DRM</para>
<para/>
<para>Code Listing 3.1: Installing X11-DRM</para>
<para># emerge x11-drm</para>
<para/>
<para/>
<para>Configure Xorg.conf</para>
<para/>
<para>Some chipsets require you to rebuild xorg-x11 with USE="insecure-drivers". This applies to mach64, unichrome and savage chipsets on xorg-x11-6.8.2, and to mach64 and unichrome on xorg-x11-6.8.99.x. Savage users should not try xorg-x11-6.8.99.x as support for the savage there is broken. </para>
<para/>
<para>Code Listing 3.2: Rebuilding xorg-x11</para>
<para>(Add the insecure-drivers USE flag if you use one of the aforementioned chipsets)</para>
<para># echo "x11-base/xorg-x11 insecure-drivers" &gt;&gt; /etc/portage/package.use</para>
<para/>
<para># emerge xorg-x11</para>
<para/>
<para/>
<para>Open /etc/X11/xorg.conf with your favorite text editor and edit it to enable DRI and GLX. </para>
<para/>
<para>Code Listing 3.3: xorg.conf</para>
<para>...</para>
<para>Section "Module"</para>
<para>  Load "dri"</para>
<para>  Load "glx"</para>
<para>  ...</para>
<para>EndSection</para>
<para>...</para>
<para>Section "Device"</para>
<para>  Driver "radeon"</para>
<para>  ...</para>
<para>EndSection</para>
<para>...</para>
<para>Section "dri"</para>
<para>  Mode 0666</para>
<para>EndSection</para>
<para/>
<para/>
<para>If you are using a different driver, replace "radeon" with yours. </para>
<para/>
<para>Changes to modules.autoload.d</para>
<para/>
<para>You will need to add the module name that your card uses to /etc/modules.autoload.d/kernel-2.6 to ensure that the module is loaded automatically when the system starts up. </para>
<para/>
<para>Code Listing 3.4: Editing /etc/modules.autoload.d/kernel-2.6</para>
<para>(Change module name as required.)</para>
<para>intel-agp</para>
<para/>
<para>Note: If you compiled agpgart as a module, you will also need to add it to /etc/modules.autoload.d/kernel-2.6. </para>
<para/>
<para/></section><section><info><title>4. Test 3D acceleration</title></info>
<para/>
<para>Reboot to the new kernel</para>
<para/>
<para>Reboot your computer to your new kernel and login as a normal user. It's time to see if you have direct rendering and how good it is. </para>
<para/>
<para>Code Listing 4.1: Testing rendering</para>
<para>$ startx</para>
<para>(No need to load modules for your driver or agpgart, even if you compiled them as a module.)</para>
<para>(They will be loaded automatically.)</para>
<para>$ glxinfo | grep rendering</para>
<para>direct rendering: Yes</para>
<para>(If it says "No", you don't have 3D acceleration.)</para>
<para>$ glxgears</para>
<para/>
<para>(Test your frames per second (FPS) at the default size. The number should be )</para>
<para>(significantly higher than before installing x11-drm. Do this while the CPU is as idle as possible.)</para>
<para/>
<para/></section><section><info><title>5. Using the CVS sources</title></info>
<para>Warning: Don't do this if the package worked. </para>
<para/>
<para/>
<para>Do you need the CVS?</para>
<para/>
<para>First you have to check whether the x11-drm package works. If it doesn't and you have checked your logs to verify it's not a configuration error, you might want to consider the CVS sources. There are also daily driver snapshots available if you do not wish to build the full CVS. </para>
<para/>
<para>Do the CVS sources support your card?</para>
<para/>
<para>Check the DRI supported cards list to see if the CVS supports your card. Even if it doesn't, but it supports a similar card, try it. </para>
<para/>
<para>Follow the CVS Instructions</para>
<para/>
<para>The DRI project has a document about CVS compiling themselves. Please read the document and follow the instructions up to the Installing for X.org part. </para>
<para/>
<para>Install the CVS</para>
<para/>
<para>Verify that the DRI kernel module(s) for your system were built: </para>
<para/>
<para>Code Listing 5.1: Verification</para>
<para># cd ~/DRI-CVS/build/xc/programs/Xserver/hw/xfree86/os-support/linux/drm/kernel; ls</para>
<para/>
<para/>
<para>For the 3dfx Voodoo, you should see tdfx.o. For the Matrox G200/G400, you should see mga.o. For the ATI Rage 128, you should see r128.o. For the ATI Radeon, you should see radeon.o. For the Intel i810, you should see i810.o. If the DRI kernel module(s) failed to build, you should verify that you're using the right version of the Linux kernel. The most recent kernels are not always supported. </para>
<para/>
<para>Install over your X.org installation. You may wish to back up xorg-x11. </para>
<para/>
<para>Code Listing 5.2: Backing up Xorg</para>
<para># quickpkg xorg-x11</para>
<para>(This backs up your Xorg-X11 package.)</para>
<para># make install</para>
<para/>
<para/>
<para>Follow the "Configure Xorg" section above. </para>
<para/>
<para>To load the appropriate DRM module in your running kernel, copy the kernel module to /lib/modules/`uname -r`/kernel/drivers/char/drm/ then run modules-update and restart your X server. If you're not running the kernel you'll be using it in, instead of `uname -r`, use that kernel's name. </para>
<para>Warning: Make sure you first unload any older DRI kernel modules that might be already loaded. Note that some DRM modules require that the agpgart module be loaded first. </para>
<para/>
<para/></section><section><info><title>6. Tweak your performance</title></info>
<para/>
<para>Get the most out of direct rendering</para>
<para/>
<para>A few options may increase performance by up to 30 percent (or more) over the default. Set them in /etc/X11/xorg.conf. However, you will first need to check that your motherboard and video card support these options. </para>
<para/>
<para>First, let's see if your video card can support fast writes. We'll do this by closely inspecting the output from lspci. Specifically, we are looking at the "VGA compatible controller" information. </para>
<para/>
<para>Code Listing 6.1: Video card check</para>
<para># lspci -vv</para>
<para>01:00.0 VGA compatible controller: ATI Technologies Inc Radeon Mobility M6 LY (prog-if 00 [VGA])</para>
<para>. . .</para>
<para>Capabilities: [58] AGP version 2.0</para>
<para>    Status: RQ=48 Iso- ArqSz=0 Cal=0 SBA+ ITACoh- GART64- HTrans- 64bit- FW+ AGP3- Rate=x1,x2,x4</para>
<para/>
<para/>
<para>While quite a lot of information is produced, we are looking for FW in the "Status" subsection of the AGP "Capabilities" section. If FW+ is present in the "Status" line, it means the card supports fast writes. We can now check if the motherboard supports fast writes. </para>
<para>Important: If you do not see FW+, but instead see FW-, you cannot enable fast writes in xorg.conf. Your card does not support fast writes. </para>
<para/>
<para/>
<para>Now let's make sure the motherboard supports fast writes as well. This time, look at the "Host bridge" section of your lspci output. </para>
<para/>
<para>Code Listing 6.2: Motherboard check</para>
<para># lspci -vv</para>
<para>00:00.0 Host bridge: Intel Corporation 82830 830 Chipset Host Bridge (rev 02)</para>
<para>. . .</para>
<para>Capabilities: [a0] AGP version 2.0</para>
<para>    Status: RQ=32 Iso- ArqSz=0 Cal=0 SBA+ ITACoh- GART64- HTrans- 64bit- FW+ AGP3- Rate=x1,x2,x4</para>
<para/>
<para/>
<para>Again, examine the "Status" subsection of your AGP "Capabilities" section. Look for FW. If you see FW+, your motherboard supports fast writes. </para>
<para>Important: Remember, both your video card information and your motherboard information must show the same FW capability. If either device shows FW- in "Status", you cannot enable fast writes in xorg.conf. </para>
<para/>
<para/>
<para>Assuming that all has gone well and both your motherboard and video card support fast writes, let's enable this option in /etc/X11/xorg.conf and get the best performance out of your hardware. </para>
<para/>
<para>Code Listing 6.3: xorg.conf</para>
<para>Section "Device"</para>
<para>  Option     "AGPMode" "4"</para>
<para>  (This increased FPS from 609 to 618.)</para>
<para>  Option     "AGPFastWrite" "True"</para>
<para>  (This had no measurable effect, but it may increase instability of your computer.)</para>
<para>  (You may also need to set it in your BIOS.)</para>
<para>  Option     "EnablePageFlip" "True"</para>
<para>  (This improved FPS from 618 to 702. It also is "risky" but few people have reported problems.)</para>
<para>  ...</para>
<para>EndSection</para>
<para/>
<para>Warning: Enabling AGPFastWrite on a VIA chipset will very likely cause your machine to lock up. VIA chipsets do not play nicely with fast writes, so use this setting at your own risk. </para>
<para/>
<para>Note: Remember, if you want fast writes to work properly, you will have to first enable the appropriate option in your BIOS. </para>
<para/>
<para/>
<para>If you want to set even more features, check out the feature matrix on the DRI web site or the features listing on Sourceforge. </para>
<para/></section><section><info><title>7. Troubleshooting</title></info>
<para/>
<para>It doesn't work. I just recompiled my kernel or switched to a new one.</para>
<para/>
<para>Whenever you rebuild your kernel or switch to another kernel, you'll have to rebuild the kernel module. Note that you don't need to remerge xorg-x11, but you will need to remerge x11-drm. </para>
<para/>
<para>It doesn't work. I don't have rendering, and I can't tell why.</para>
<para/>
<para>Try insmod radeon before you start the X server. Also, try building agpgart into the kernel instead of as a module. </para>
<para/>
<para>When I startx, I get this error: "[drm] failed to load kernel module agpgart"</para>
<para/>
<para>That's because you compiled agpgart into the kernel instead of as a module. Ignore it unless you're having problems. </para>
<para/>
<para>Direct rendering doesn't work, and in /var/log/Xorg.0.log I have an error about driver version too low.</para>
<para/>
<para>You aren't using the x11-drm driver. Check if you compiled DRM and the driver into the kernel; you shouldn't have. </para>
<para/>
<para>I have a Radeon, and I want TV-Out.</para>
<para/>
<para>Check out ati-gatos drivers. emerge -s gatos. </para>
<para/>
<para>It doesn't work. My card is so incredibly new and cool that it isn't supported at all.</para>
<para/>
<para>Try out the binary drivers. For ati-drivers, a listing is at http://www.schneider-digital.de/html/download_ati.php. If those don't support it, use fbdev. It's slow, but it works. </para>
<para/>
<para>I have a PCI card and it doesn't work. Help!</para>
<para/>
<para>In section "Device" enable ForcePCIMode. </para>
<para/>
<para>Code Listing 7.1: Enabling ForcePCIMode</para>
<para>Option "ForcePCIMode" "True"</para>
<para/>
<para/></section><section><info><title>8. Acknowledgments</title></info>
<para>Christopher Webber for suggesting a troubleshooting question about changing or recompiling kernels </para>
<para>Steve, for suggesting consistency between the cases of dri and DRI in XF86Config </para>
<para/></section><section><info><title>9. References</title></info>
<orderedlist>
<listitem>
<para>
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://forums.gentoo.org/viewtopic.php?t=46681">http://forums.gentoo.org/viewtopic.php?t=46681</link>
</para>
</listitem>
<listitem>
<para>
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://forums.gentoo.org/viewtopic.php?t=46681">http://forums.gentoo.org/viewtopic.php?t=29264</link>
</para>
</listitem>
<listitem>
<para>
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://dri.freedesktop.org/">http://dri.freedesktop.org/</link>
</para>
</listitem>
<listitem>
<para>
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.retinalburn.net/linux/dri_status.html">http://www.retinalburn.net/linux/dri_status.html</link>
</para>
</listitem>
</orderedlist>
<para/>
<para/>
<para/></section>
</article>