<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<article xmlns="http://docbook.org/ns/docbook"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<info><title>Тюнинг Gentoo</title></info><section><info><title>Ядро 2.6: Тонкости настройки</title></info>
<para>Ссылка на оригинал: <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://ru.gentoo-wiki.com/Ядро_2.6">http://ru.gentoo-wiki.com/Ядро_2.6</link>
</para>
<para>С версии: 1.5</para>
<para/><section><info><title>Параметры виртуальной памяти </title></info>
<para>Ядро Linux позволяет регулировать параметры свопинга двумя способами: автоматически, исходя из того, насколько активно используется та или иная программа, либо вручную задавая агрессивность свопинга. </para>
<para>Содержимое файла /proc/sys/vm/swappiness определяет агрессивность свопинга, а истинность (неравенство нулю) значения в файле /proc/sys/vm/autoswappiness определяет какой из двух режимов будет использоваться. Таким образом, если вы хотите установить агрессивность свопинга вручную, то следует воспользоваться командой: </para>
<para>echo 0 &gt; /proc/sys/vm/autoswappiness </para>
<para>чтобы отключить автоматический режим и уже затем установить желаемый режим вручную. Значения в файле /proc/sys/vm/swappiness изменяются от 0 до 100. При минимальном значении ядро стремится большую часть содержимого держать в физической памяти, при максимальном стремится к экономии физической памяти.Чтобы максимльно сэкономить оперативную память введите: </para>
<para>echo 100 &gt; /proc/sys/vm/swappiness </para>
<para>По умолчанию значение 60, но если поставить 0, это должно побудить систему пользоваться подкачкой только в критических ситуациях. Для медленных систем может ускорить работу. Значение 100 не рекомендуется для тех у кого достаточно медленный жесткий диск. Казалось бы, это значение вообще не желательно для использования, однако, Andrew Morton, один из разработчиков ядра Linux, заявляет, что на своих рабочих компьютерах (десктопах, не серверах) использует значение 100, т.к. считает, что ему совершенно ни к чему эти сотни занятых мегабайт оперативной памяти. И он в некоторых случаях прав, так как известно, что Linux использует свободную оперативную память для кэширования дисковых операций, таким образом, значение близкое или равное 100 может и ускорить систему. Таким образом, решать вам, исходя из количества и ресурсоемкости используемых вами задач. Хотя, вряд ли вы так же активно используете свой десктоп, как Эндрю ;) </para>
<para>Также, возможно заставить систему устанавливать нужный режим при загрузке, прописав в файл /etc/sysctl.conf строку </para>
<informaltable frame="all">
<tgroup cols="1"><tbody>
<row>
<entry>
<para>Файл: /etc/sysctl.conf </para>
</entry>
</row>
<row>
<entry>
<para>vm.swappiness=100 </para>
</entry>
</row></tbody></tgroup>
</informaltable>
<para>разумеется, вместо 100 следует подставить то значение, которое вам подходит. </para>
<para/>
<para/></section></section><section><info><title>Руководство по предварительному связыванию в Gentoo Linux</title></info>
<para>Ссылка на оригинал: <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.gentoo.org/doc/ru/prelink-howto.xml">http://www.gentoo.org/doc/ru/prelink-howto.xml</link>
</para>
<para>C версии: 1.0</para>
<para>Перенесено в: 1.5</para>
<para/><section><info><title>1. Введение</title></info>
<para/><section><info><title>Что такое предварительное связывание (Prelink) и как оно может помочь мне? </title></info>
<para>Большинство приложений используют разделяемые библиотеки. Эти разделяемые библиотеки должны быть загружены в память во время выполнения программы, при этом необходимо определить различные символьные ссылки. Для большинства небольших программ динамическое связывание происходит очень быстро. Но для программ, написанных на C++, имеющих много библиотечных зависимостей, динамическое связывание может занять много времени. </para>
<para/>
<para>На большинстве систем, библиотеки обычно остаются неизменными и когда программа запускается, операции необходимые для связывания, каждый раз одинаковы. Предварительное связывание использует данную особенность, выполняя связывание и сохраняя библиотеки в выполняемом файле, фактически уже связанными. Для связывания, вам потребуется ld-linux.so в glibc; для распознавания предварительного связывания версия glibc должна быть &gt;= 2.3.1-r2 </para>
<para/>
<para>Предварительное связывание может уменьшить время загрузки приложений. Например, типичные программы KDE могут загружаться на 50% быстрее. Необходимым условием является перезапуск процесса предварительного связывания каждый раз при обновлении библиотек для программ, которые на них ссылаются. </para></section><section><info><title>Резюме</title></info>
<para>Предварительное связывание производится программой, имеющей название, как не странно, prelink. Она изменяет выполняемый файл таким образом, что он запускается быстрее. </para>
<para>Если зависимые от приложения библиотеки были изменены после того, как были предварительно связаны с приложением, то они потребуют повторного предварительного связывания, иначе вы потеряете преимущества в скорости загрузки. </para>
<para>Изменения выполняемого файла полностью обратимы, поскольку программа prelink имеет функцию undo. </para>
<para>Новые версии portage могут обрабатывать, при помощи программы prelink, изменяющиеся контрольные суммы MD5 и поля mtime выполняемых файлов. </para>
<para>У вас должен быть glibc-2.3.1-r2 или более новый, и бинарные файлы должны быть скомпилированы с binutils-2.13.90.0.xx или выше. </para>
<para/></section></section><section><info><title>2. Инициализация предварительного связывания</title></info>
<para/><section><info><title>Установка программ</title></info>
<para>Примечание: Я подразумеваю, что у вас есть Gentoo-1.4, который был собран при помощи gcc-3.2 или более поздней версии и binutils-2.13.90.0.xx. Это требуется для того, что бы выполняемые файлы могли быть предварительно связаны. </para>
<para/>
<para>Предупреждение: Должен быть установлен glibc 2.3.1 или более новый, иначе программа prelink может испортить все ваши выполняемые файлы! </para>
<para/>
<para>Для начала обновите свое дерево портежей, потому что многие из необходимых приложений часто обновляются и постоянно выходят исправления ошибок. </para>
<para/>
<para>Листинг 2.1: Обновление вашего дерева портежей</para>
<para># emerge sync</para>
<para/>
<para>Далее, убедитесь, что у вас установлен portage-2.0.26 или более новый. Это требуется для того, что бы portage могло распознать предварительно связанные выполняемые файлы и при необходимости корректно их деинсталлировать. Т.к. предварительное связывание изменяет контрольную сумму MD5 бинарных файлов. </para>
<para/>
<para>Листинг 2.2: Проверка версии дерева портежей</para>
<para># emerge "&gt;=portage-2.0.46"</para>
<para/>
<para>Теперь вы можете вызвать emerge для программы предварительного связывания. Процесс emerge автоматически проверит, что ваша система может безопасно выполнять предварительное связывание. </para>
<para/>
<para>Листинг 2.3: Устанавливаем предварительное связывание</para>
<para># emerge prelink</para>
<para/>
<para>Некоторые люди, в ходе выполнения тестов, получают ошибки выполняя emerge для программы prelink. Тесты размещены в пакете из соображений безопасности, предварительное связывание будет непредсказуемым, если их отменить. Эти ошибки обычно связаны с базовыми пакетами, такими как binutils, gcc и glibс. В таком случае попробуйте выполнить emerge этих пакетов повторно.</para>
<para/>
<para>Примечание: Если ошибки продолжают появляться, попробуйте скомпилировать и протестировать программу prelink самостоятельно (./configure ; make ; make check ). В случае сбоя вы можете просмотреть *.log файлы в директории с набором тестов. Они могут дать вам некоторые полезные подсказки. </para>
<para/>
<para>Если вы имеете набор действий, которые демонстрируют ошибки в другой системе, пожалуйста отправьте его на Stefan Jones. </para>
<para/></section><section><info><title>Настройка</title></info>
<para/>
<para>Portage автоматически генерирует файл /etc/prelink.conf, который говорит программе prelink какие файлы требуется предварительно связать. </para>
<para>К сожалению, вы не сможете предварительно связать файлы, которые были скомпилированы старыми версиями пакета binutils. Большинство таких приложений поставляется уже скомпилированными, не имея исходных кодов, и устанавливаются в каталоге /opt. Создайте следующий файл, для того, что бы запретить программе prelink использовать предварительное связывание для подобных файлов. </para>
<para/>
<para>Листинг 2.4: /etc/env.d/99prelink</para>
<para>PRELINK_PATH_MASK="/opt"</para>
<para/>
<para>Примечание: Вы можете добавить больше или меньше директорий, в список, разделенный двоеточиями. </para>
<para/></section></section><section><info><title>3. Предварительное связывание</title></info><section><info><title>Применение предварительного связывания</title></info>
<para/>
<para>Я использую следующую команду для предварительного связывания всех бинарных файлов в директориях, заданных в файле /etc/prelink.conf. </para>
<para/>
<para>Листинг 3.1: Предварительное связывание заданных файлов</para>
<para># prelink -afmR</para>
<para/>
<para>Предупреждение: Наблюдалось, что при наличии небольшого свободного пространства в момент выполнения предварительного связывания для всей системы, существует вероятность усечения выполняемых файлов. Результатом может стать испорченная система. Используйте команду file или readelf для проверки целостности выполняемых файлов. Также вы можете заранее проверить наличие свободного места коммандо df -h </para>
<para>Описание опций:</para>
<orderedlist>
<listitem>
<para>-a        All, применить предварительное связывание ко всем выполняемым файлам. </para>
</listitem>
<listitem>
<para>-f        Вынуждает повторить предварительное связывание для файлов, которые уже подвергались ему. Это требуется т.к. программа prelink прекращает обработку существующих старых связанных файлов, зависимые библиотеки которых могли измениться. </para>
</listitem>
<listitem>
<para>-m        Сохраняет пространство виртуальной памяти. Это требуется, если вы имеете много библиотек, которые необходимо связать. </para>
</listitem>
<listitem>
<para>-R        Random, -- Выбирает случайный порядок адресов, это увеличивает безопасность против переполнений буферов. </para>
</listitem>
</orderedlist>
<para/>
<para>Примечание: Более подробно об опциях можно узнать, набрав man prelink </para>
<para/>
<para/>
<para/></section></section><section><info><title>4. Известные проблемы и методы их решения</title></info>
<para/>
<para>"Предварительное связывание не работает с разделяемой библиотекой, собранной без опции PIC" </para>
<para/>
<para>Причиной данной проблемы являются объектные файлы разделяемой библиотеки, скомпилированные без опции gcc -fPIC. </para>
<para/>
<para>Далее следует список проблемных библиотек и список пакетов, для которых требуется повторно вызвать emerge, в случае возникновения данной проблемы. </para>
<para/>
<para>Листинг 4.1: Исправления</para>
<para>(Для библиотеки ORBit /usr/lib/libIIOP.so.0.5.17)</para>
<para>emerge "&gt;=sys-apps/tcp-wrappers-7.6-r4" ORBit</para>
<para>(Для библиотеки zlib  /usr/lib/libz.so.1.1.4)</para>
<para>emerge "&gt;=sys-libs/zlib-1.1.4"</para>
<para>(Для svgalib, /usr/lib/libsvga.so.xx)</para>
<para>emerge "&gt;=media-libs/svgalib-1.9.16"</para>
<para>(Для библиотеки XFree openGL, libGLU.so.1)</para>
<para>emerge "&gt;=x11-base/xfree-4.2.1-r2"</para>
<para>(Для libpcap.so.0.6)</para>
<para>emerge "&gt;=net-libs/libpcap-0.7.1-r2"</para>
<para>(Для библиотеки lcms, /usr/lib/liblcms.so.1)</para>
<para>emerge "&gt;=media-libs/lcms-1.09"</para>
<para/>
<para>Примечание: Многие библиотеки статично связаны с zlib и/или tcp-wrappers, так что сначала попробуйте выполнить emerge для них, после чего, повторно запустите emerge для проблемных библиотек. </para>
<para/>
<para>Если вы имеете проблемы с предварительным связыванием QT/KDE, то сначала попытайтесь обновить x11-base/xfree до версии 4.2.1-r2 или более новой и x11-libs/qt до версии 3.1.0-r1 или более новой. Если QT так и не работает, тогда попробуйте скомпилировать его без поддержки xinerama, задав строку myconf="-no-xinerama ${myconf}" в файле ebuild для qt. </para>
<para/>
<para>Далее приводится список библиотек, которые пока не работают или не могут работать вообще: </para>
<orderedlist>
<listitem>
<para>Библиотеки в пакете wine, включая windex. Они в любом случае не могут ускорить выполняемые файлы MS Windows. </para>
</listitem>
<listitem>
<para>Библиотека в media-video/mjpgtools, /usr/lib/liblavfile-1.6.so.0 </para>
</listitem>
</orderedlist>
<para/>
<para>Если у вас есть проблемы с библиотекой, которой нет в списке, пожалуйста сообщите об этом, предпочтительно, добавив -fPIC к соответствующим CFLAGS. </para>
<para/>
<para>Прерывание предварительного связывания файла, с выводом сообщения, вида: "1631 Aborted ...." </para>
<para/>
<para>Вам необходимо использовать опцию -f программы prelink; т.е. повторить предварительное связывание для всей системы с нуля. Попробуйте запустить prelink -af </para>
<para/>
<para>"Ошибка: &lt;file&gt;: error while loading shared libraries: unexpected reloc type..." </para>
<para/>
<para>Это было исправлено в пакете sys-libs/glibc-2.3.1-r2 2002/11/18, выполните emerge для glibc, если у вас более старая версия. </para>
<para/>
<para>Так же запустите prelink -u -a -m ; prelink -a -m это должно помочь. Если все это не помогает, просто запустите prelink -u &lt;file&gt; </para>
<para/>
<para>У меня проблемы с библиотеками Nvidia openGL</para>
<para/>
<para>Ускоренные библиотеки openGL идущие с пакетом nvidia-glx скомпилированы нестандартным образом, и программа prelink выводит массу предупреждений. Здесь нет повода для беспокойства, и это не может быть исправленo кем-либо помимо компании nvidia. Вы всегда можете вернуться к xfree версии библиотеки libGL.so, если вам не требуется ускорение 3D. Хотя драйвер xfree nvidia работает нормально. </para>
<para/>
<para>После предварительного связывания моей системы, некоторые статичные выполняемые файлы более не работают </para>
<para/>
<para>Там где участвует glibc, не бывает такой вещи как 100% статичный выполняемый файл. Если вы статично скомпилировали выполняемый файл с glibс, он может продолжать оставаться зависимым от других системных файлов. Далее приводится объяснение от Dick Howell. </para>
<para/>
<para>"Я предполагал, что все должно находиться в скачанном файле и не должно быть никаких зависимостей с локальными библиотеками на целевой системе. К сожалению, в Linux, и я думаю везде, где используется GLIBC, это до сих пор не совсем верно. Существует библиотека "libnss" (name service switch - переключатель сервиса имен, некоторые люди думают, что это network secutiry system - сетевая система безопасности) которая предоставляет функции для доступа к различным базам данных для аутентификации, сетевой информации и для других вещей. Эта библиотека предполагает сделать приложения независимыми от отдельно сконфигурированных сетевых окружений машины. Хорошая идея, но изменения GLIBC может вести к проблемам ее загрузки. И вы не можете статически связать "libnss" так как она сконфигурирована для каждой машины индивидуально. Я думаю, что, главным образом, это происходит из-за статического связывания других GLIBC библиотек, особенно "libpthread, "libm" и "libc", откуда приходят несовместимые вызовы к функциям "libnss"" </para>
<para/>
<para>Предварительное связывание обрывается с ошибкой"prelink: dso.c:306: fdopen_dso: Assertion `j == k' failed." </para>
<para/>
<para>Это известная проблема, любезно продиагностирована здесь. Программа prelink не может справиться с выполняемыми файлами сжатыми методом UPX. Для версии prelink-20021213 нет другого способа решить эту проблему, кроме как спрятать выполняемые файлы во время предварительного связывания. Смотрите раздел конфигурации выше, где обсуждается вопрос о том, как это осуществить. </para>
<para/></section><section><info><title>5. Заключение</title></info>
<para/>
<para>Предварительное связывание может решительно ускорить время запуска для некоторых больших приложений. Его поддержка встроена в дерево портежей. Предварительное связывание безопасно, т.к. вы всегда можете отменить его действие для любого выполняемого файла, если вы столкнетесь с какими-либо проблемами. Помните что когда вы обновляете glibc или другие библиотеки, с которыми вы осуществили предварительное связывание, вам надо будет перезапустить prelink. В общем, удачи!</para>
<para/></section></section><section><info><title>Тюнинг системы и запуска некоторых программ</title></info>
<para/>
<para>Ссылка на оригинал: <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://ru.gentoo-wiki.com/Тюнинг_сис%D1%25">http://ru.gentoo-wiki.com/Тюнинг системы и запуска некоторых программ</link>
</para>
<para>С версии: 1.5</para><section><info><title>Введение</title></info>
<para>Многие программы и части системы Linux работают по-умолчанию не на полную "мощность", т.к. они должны корректно работать на широком спектре системных конфигураций. Иногда, это может создать иллюзию о том, что Linux - более медленная система чем другие. Это не так. В данной статье будут рассмотренны наиболее важные настройки, которые дадут вам наибольший прирост скорости и эффективности системы. </para>
<para>Тонкая настройка дисковой подсистемы (hdparm, планировщики ввода-вывода) перенесена в <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://ru.gentoo-wiki.com/Hастройка_дисковой_подсистемы">отдельную статью</link> </para></section></section><section><info><title> mplayer</title></info>
<orderedlist>
<listitem>
<para>Желательно использовать -vo xvidix или -vo xv, чтобы перенести нагрузку с CPU на вашу видео-карту </para>
</listitem>
<listitem>
<para>Собирайте mplayer с поддержкой особенностей именно вашего процессора (используйте emerge mplayer -pv - там много всего полезного), многие части кода mplayer оптимизированы для использования на конкретных процессорах. </para>
</listitem>
<listitem>
<para>При проигрывании используйте </para>
</listitem>
</orderedlist>
<para>hdparm -u1 -A1 -a 128 /dev/hda (или что там у вас вместо hda) </para>
<orderedlist>
<listitem>
<para>Ипользование команды nice при запуске mplayer с приоритетами -5 и -10 также дает преимущества </para>
</listitem>
</orderedlist></section><section><info><title>XMMS</title></info>
<orderedlist>
<listitem>
<para>Как и для mplayer не забудьте собрать XMMS с поддержкой особенностей вашего процессора </para>
</listitem>
<listitem>
<para>Установите значение для output-buffer побольше (где-то 2500-3000) </para>
</listitem>
</orderedlist>
<para>Preferences → Output Plugin → Configure → Buffering → Buffer size(ms) </para>
<para>или то же самое, но для локализованной версии </para>
<para>Настройки → ВАШ плагин вывода звука → Настройка → Дополнительные настройки → Размер буфера (милисек) </para>
<orderedlist>
<listitem>
<para>Старайтесь использовать качественные звуковые карты, которые имеют более полную обработку звука на уровне железа </para>
</listitem>
</orderedlist>
<para/>
<para/>
<para/>
<para/>
<para/></section><section><info><title>Тюнинг настроек программ из семейства Mozilla</title></info>Тюнинг настроек программ из семейства Mozill<para>Ссылка на оригинал: <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://ru.gentoo-wiki.com/Тюнинг_настроек_программ_из_семейства_Mozilla">http://ru.gentoo-wiki.com/Тюнинг настроек программ из семейства Mozilla</link>
</para>
<para>С версии: 1.5</para>
<para/><section><info><title>Navigator(Seamonkey/Firefox)</title></info>
<para>Браузеры семейства Mozilla имеют большое количество настроек, все из которых легко доступны, если набрать в строке адреса вместо URL строку 'about:config'. Следующие пять настроек позволят ускорить загрузку страниц: </para>
<orderedlist>
<listitem>
<para>network.http.pipelining </para>
</listitem>
<listitem>
<para>network.http.pipelining.firstrequest </para>
</listitem>
<listitem>
<para>network.http.pipelining.maxrequests </para>
</listitem>
<listitem>
<para>network.http.proxy.pipelining </para>
</listitem>
<listitem>
<para>nglayout.initialpaint.delay </para>
</listitem>
</orderedlist>
<para>Настройка pipelining позволит браузеру делать одновременно несколько запросов к серверу. По-умолчанию используется одно соединение. Соответственно, значения network.http.pipelining, network.http.pipelining.firstrequest и network.http.proxy.pipelining следует выставить в true. Параметр network.http.pipelining.maxrequests отвечает за максимальное количество соединений. Но не стоит его делать слишком большим, т.к. это может привести к ошибкам при загрузке, рекомендуется выставить его в районе 12. И, наконец, nglayout.initialpaint.delay это визуальное ускорение, то есть задержка между тем как браузер начал получать ответ от сервера и началом отображения в окне браузера. Стоит поставить здесь 0 т.к. это позволит вам получить доступ к уже загруженной части страницы. </para>
<para>Примечание: вторая и пятая настройки по пока невыясненным причинам могут отсутствовать в вашем браузере. Чтобы их задействовать, можно добавить их вручную (правая кнопка мыши→New→тип значения). </para>
<para>browser.turbo.enabled </para>
<para>И выставляем ему значение 'true' </para>
<para>Далее ищем </para>
<orderedlist>
<listitem>
<para>network.http.max-connections-per-server </para>
</listitem>
<listitem>
<para>network.http.max-persistent-connections-per-proxy </para>
</listitem>
<listitem>
<para>network.http.max-persistent-connections-per-server </para>
</listitem>
</orderedlist>
<para>Выставляем всем этим параметрам значение '8' </para>
<para/></section><section><info><title>Управление Кешем в Firefox и Seamonkey</title></info>
<para>С версий Firefox 1.5.x и Seamonkey 1.0.x стала доступна функция быстрого перехода по открытым ранее страницам за счет хранения отрендереной страницы в оперативной памяти. Не всем это понравилось т.к. броузер стал потреблять больше оперативной памяти и много и в качестве лекарства предлагали отключить эту функцию, установив в about:config опцию </para>
<orderedlist>
<listitem>
<para>browser.cache.memory.enable </para>
</listitem>
</orderedlist>
<para>соответственно в false. В то время как можно тонко оттюнинговать отведенный для этой функции размер памяти с помощью опции </para>
<orderedlist>
<listitem>
<para>browser.cache.memory.capacity </para>
</listitem>
</orderedlist>
<para>Которая по умолчанию отсутствует, соответственно тип имеет - integer, а значение задается в килобайтах. Проверить изменения, а также просто просматривать сатистику кешей (memory и disk) можно открыв about:cache до и после.</para></section><section><info><title> Управление логотипами сайтов</title></info>
<para>Есть две опции для включени/выключения логотипов сайтов в табах и адресной стрке: </para>
<orderedlist>
<listitem>
<para>browser.chrome.favicons boolean </para>
</listitem>
<listitem>
<para>browser.chrome.site_icons boolean </para>
</listitem>
</orderedlist>
<para>Как я понял это два стандарта (если не прав, поправьте[favicon.ico обычно лежит в корне сайта, как обстоит с site_icon не знаю]). Например gentoo.ru использует favicon, а на странице mult.ru (непосредственно на той на каторой загружается выбранный мульт, на главной странице никакого лого не показывается) показывалось лого при выключенном favicons и включенном site_icons. </para></section><section><info><title>Для перешедших с Firefox на Seamonkey.</title></info>
<para>Не знаю как вам а мне в Firefox нравится функция сохраняющая и соответственно показывающая эти самые лого при просмотре закладок. И перейдя с недавних пор на Seamonkey мне очень ее недоставало, ибо зрительно с ней гораздо удобней отыскивать нужную закладку, но по умолчанию эта функция там отключена. А управляется она оказывается опцией </para>
<orderedlist>
<listitem>
<para>browser.chrome.load_toolbar_icons integer </para>
</listitem>
</orderedlist></section><section><info><title>Thumbnail'ы просматриваемых картинок в табах</title></info>
<para>Итак с недавних пор появилась такая небольшая функция как thumbnail просматриваемой картинки на табе и в адресной строке, но к сожалению у некоторых эта малозначимая функция вызывает тормоза интерфейса, но не все знают как ее отключить не отключая favicon(логотип сайта). Делается это с помощью опции </para>
<orderedlist>
<listitem>
<para>browser.chrome.image_icons.max_size </para>
</listitem>
</orderedlist>
<para>для которой можно задать размер картинки, по умолчанию ее значение 1024 (килобайт или разрешение?), соответственно чтобы отключить ее, нужно установить значение 0. </para></section></section><section><info><title>Тонкая настройка IDE дисков с помощью hdparm</title></info>
<para>Ссылка на оригинал: <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.opennet.ru/base/sys/htparm_tune.txt.html">http://www.opennet.ru/base/sys/htparm_tune.txt.html</link>
</para>
<para>Перенесено в: 1.5</para><section><info><title/></info><section><info><title>Введение</title></info>
<para>К сожалению настройки по-умолчанию для IDE жёстких дисков сделаны с уклоном в надёжность работы, в том числе на некачественном оборудовании. На большинстве же современных материнских плат и жёстких дисков можно заметно увеличить производительность IDE подсистемы, причём это не потребует много времени. </para></section></section><section><info><title/></info><section><info><title>Характеристики IDE устройства</title></info>
<para/>
<para>Для получения характеристик IDE устройства выполните команду: </para>
<para>hdparm -i /dev/hda</para>
<para>Вместо /dev/hda можно указать любое другое IDE устройство </para>
<para>Расшифровка</para>
<para/>
<para>Max Mult Sect?: Это поле содержит максимальное число секторов, которое ваш жесткий диск может прочитать за «один присест». </para>
<para>Mult Sect?: Текущая настройка количества секторов, считываемых за один раз. </para>
<para>PIO modes и DMA modes: Здесь перечисляются режимы, которые поддерживает жесткий диск. Режим, помеченный символом «звездочка» (*), является текущим. </para>
<para>Advanced PM?: Признак 'yes' указывает на то, что жесткий диск поддерживает APM (Advanced Power Management – Расширенное Управление Питанием). </para>
<para/>
<para>Запустив другую команду, вы получите дополнительную информацию: </para>
<para>darkstar:$ hdparm /dev/hda </para>
<para/>
<para>Результат работы команды: </para>
<para>/dev/hda: </para>
<para>multcount = 0 (on) </para>
<para>I / O? support = 0 (16-bit) </para>
<para>unmaskirq = 0 (off) </para>
<para>using_dma = 0 (off) </para>
<para>keepsettings = 0 (off) </para>
<para>nowerr = 0 (off) </para>
<para>readonly = 0 (off) </para>
<para>readahead = 8 (on) </para>
<para>geometry = 2482/255/63, sectors = 39876480, start = 0 </para>
<para/>
<para/>
<para>Коротко... </para>
<orderedlist>
<listitem>
<para>multcount – число секторов, считываемых одновременно; </para>
</listitem>
<listitem>
<para>I / O? support – режим обмена с жестким диском (16/32/32sync); </para>
</listitem>
<listitem>
<para>using_dma – указывает, используется ли в настоящий момент режим DMA или нет; </para>
</listitem>
<listitem>
<para>keepsettings – указывает, сохраняются ли настройки после программного сброса (изменять эту настройку не рекомендуется, если вы не уверены в том, что делаете); </para>
</listitem>
<listitem>
<para>readonly – обычно установлен в 1 только для CD-ROM, этот флаг сообщает системе  является ли устройство read-only или нет; </para>
</listitem>
<listitem>
<para>readahead – количество секторов для опережающего чтения; </para>
</listitem>
</orderedlist>
<para/></section></section><section><info><title/></info><section><info><title>Настройка</title></info>
<para/>
<para>ПРЕДУПРЕЖДЕНИЕ! Неправильная настройка может привести к потере данных на </para>
<para>жёстком диске, а возможно и самого дика. </para>
<para/>
<para>I / O? Support</para>
<para/>
<para>-с0 — установка 16-и битного режима (по-умолчанию)\\ </para>
<para>-c1 — установка 32-х битного режима (обычно то, что вам нужно)\\ </para>
<para>-c3 — установка 32-х битного синхронного режима (мне не известно, когда именно это надо)</para>
<para/>
<para>Multicount</para>
<para/>
<para>Количество секторов передаваемых сразу (одним блоком). Степень двойки, максимальное число — параметр Max Mult Sect? в выводе hdparm -i. Чаще всего вам именно его и нужно указывать. </para>
<para/>
<para>Включение DMA</para>
<para/>
<para>Большинство современных чипсетов и HDD поддерживают DMA под линуксом. Для некоторых �амых новых чипсетов в данный момент поддержки DMA может не быть, однако это не так часто бывает. Обычно в течении нескольких недель после выхода нового чипсета появляется его поддержка в последнем ядре, так что если DMA у вас не включается, то следует, скорее всего, обновить ядро. </para>
<para/>
<para>-d0 — запрещение DMA\\ </para>
<para>-d1 — включение DMA </para>
<para/>
<para>DMA mode и PIO mode</para>
<para/>
<para>Самая опасная настройка — её неправильное использование чаще всего приводит </para>
<para>к повреждению данных или оборудования. </para>
<para/>
<para>-X&lt;число&gt; — установка режима PIO или DMA </para>
<para/>
<para>Режимы multiword DMA: </para>
<para/>
<para>32 (базовое число) + номер режима: </para>
<para/>
<para>-X32 — mdma0 </para>
<para>-X33 — mdma1 </para>
<para>-X34 — mdma2 </para>
<para/>
<para>Для PIO базовое число 8, для Ultra DMA? 64. </para>
<para/>
<para>-X64 — udma0 </para>
<para>-X65 — udma1 </para>
<para>-X66 — udma2 </para>
<para>-X67 — udma3 </para>
<para>-X68 — udma4 </para>
<para>-X69 — udma5 </para>
<para/>
<para>Readahead (опережающее чтение)</para>
<para/>
<para>На сколько секторов вперёд читать при запросе. Ускоряет производительность </para>
<para>при чтении файлов большого размера, однако замедляет работу с файлами </para>
<para>небольшого размера. </para>
<para>Лучше всего установить то же значение, что и для multicount. </para>
<para/>
<para>-aN — опережающее чтение N секторов </para>
<para/>
<para>Тестирование</para>
<para/>
<para>Для тестирования наберите: </para>
<para/>
<para>hdparm -t &lt;имя устройства&gt; </para>
<para/>
<para>Желательно это делать, когда заметной дисковой активности нет. </para>
<para/>
<para>Потом попробуйте какой-нибудь вариант конфигурации, например: </para>
<para>hdparm -u1c1d1m8a8 &lt;имя устройства&gt; </para>
<para/>
<para>После чего опять повторите: </para>
<para/>
<para>hdparm -t &lt;имя устройства&gt; </para>
<para/>
<para>И сравните результаты. </para>
<para>По результату этого теста не стоит подбирать опции -a и -m, для этого лучим тестом будут реальные приложения, исполняемые на вашей машине. Если это домашняя машина, а не боевой сервер, на котором важна сверхтонкая подстройка (но на таких серверах редко оказываются IDE-диски, о которых здесь идёт речь), то тогда параметр multicount (-m) ставите на максимум, а параметр read-ahead (-a) равным multicount. </para></section></section></section><section><info><title>Ускорение загрузки системы</title></info>
<para>Ссылка на оригинал: <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://ru.gentoo-wiki.com/Ускорение_загрузки_системы">http://ru.gentoo-wiki.com/Ускорение загрузки системы</link>
</para>
<para>Перенесено в: 1.5</para>
<para/><section><info><title/></info><section><info><title>Введение</title></info>
<para/>
<para>Одно из достоинств Gentoo Linux - это возможность настроить и оптимизировать буквально ВСЮ систему, в том числе и её загрузку. Данное направление оптимизации практически неисчерпаемо. При желании (но и при большом риске убить систему) загрузку можно довести и до нескольких секунд. Здесь же мы рассмотрим некоторые наиболее простые и безопасные методы ускорения загрузки. </para>
<para/>
<para>Параллельный запуск</para>
<para/>
<para>Первое, что может дать заметный прирост скорости загрузки, это распараллеливание запуска системных сервисов. В файле /etc/conf.d/rc замените NO на YES в переменной RC_PARALLEL_STARTUP. Файл: /etc/conf.d/rc </para>
<para>...</para>
<para>RC_PARALLEL_STARTUP="YES"</para>
<para>... </para>
<para/>
<para>Если у вас нет такой переменной, обновите пакет baselayout emerge -u baselayout </para>
<para/>
<para>Примечание: Если эта настройка создаст проблемы при загрузке (некоторые сервисы могут пытаться загрузиться не тогда, когда это нужно), то верните значение NO. </para>
<para/>
<para>Значительно был улучшен механизм параллельного запуска в новых (нестабильных) версиях baselayout echo "sys-apps/baselayout ~x86" &gt;&gt; /etc/portage/package.keywords emerge sync &amp;&amp; emerge sys-apps/baselayout -u </para>
<para/>
<para>Для совсем реактивного запуска используйте initng </para>
<para>emerge sys-apps/initng </para>
<para/></section></section><section><info><title/></info><section><info><title>Локальная сеть</title></info>
<para/>
<para>Если вы часто работаете без подключения к локальной сети, то наверняка заметили, как много времени уходит на определение настроек сети (точнее, на определение того, что настраивать нечего). В этом случае поможет демон ifplugd, который определяет, подключен ли сетевой кабель (точнее, активна ли сеть). Итак: </para>
<para/>
<para>emerge -n ifplugd </para>
<para/>
<para>теперь добавляем ifplugd в список запускаемых сервисов: </para>
<para/>
<para>rc-update add ifplugd boot </para>
<para/>
<para>Обновление зависимостей и переменных окружения</para>
<para/>
<para>Каждый раз при загрузке Gentoo обновляет зависимости модулей и переменные окружения, разумеется, что это имеет смысл лишь тогда, когда вы действительно внесли изменения в вашу систему. Чтобы это осуществить, сделаем следующие изменения. </para>
<para/>
<para>Меняем:</para>
<para> Файл: /etc/init.d/modules - оригинал </para>
<para>...</para>
<para>ebegin "Calculating module dependencies"</para>
<para>    /sbin/modules-update &amp;&gt;/dev/null</para>
<para>    eend $? "Failed to calculate dependencies"</para>
<para>...</para>
<para> Файл: /etc/init.d/modules - замена </para>
<para>...</para>
<para>if [ /etc/modules.d -nt /etc/modules.conf ]</para>
<para>    then</para>
<para>        ebegin "Calculating module dependencies"</para>
<para>        /sbin/modules-update &amp;&gt;/dev/null</para>
<para>        eend $? "Failed to calculate dependencies"</para>
<para>    else</para>
<para>        einfo "Module dependencies are up-to-date"</para>
<para>fi</para>
<para>... </para>
<para>Меняем: </para>
<para>Файл: /etc/init.d/bootmisc - оригинал </para>
<para>...</para>
<para>if [ -x /sbin/env-update.sh ]</para>
<para>    then</para>
<para>        ebegin "Updating environment"</para>
<para>        /sbin/env-update.sh &gt;/dev/null</para>
<para>        eend 0</para>
<para>fi</para>
<para>...  </para>
<para>Файл: /etc/init.d/bootmisc - замена </para>
<para>...</para>
<para>if [ -x /sbin/env-update.sh ]</para>
<para>  then</para>
<para>    if [ /etc/env.d -nt /etc/profile.env ]</para>
<para>      then</para>
<para>        ebegin "Updating environment"</para>
<para>        /sbin/env-update.sh &gt;/dev/null</para>
<para>        eend 0</para>
<para>      else</para>
<para>        einfo "Environment up-to-date"</para>
<para>    fi</para>
<para>fi</para>
<para>... </para>
<para/>
<para>Примечание: при использовании данного трюка следует быть внимательным при обновлении baselayout, т.к. обновление каждый раз будет пытаться вернуть изменения, сделанные вами. </para></section></section><section><info><title/></info><section><info><title>Монтирование локальных файловых систем</title></info>
<para/>
<para>Можно подправить сервис localmount, чтобы он монтировал локальные файловые системы не одну за другой, а все сразу. </para>
<para/>
<para>Замените: </para>
<para>Файл: /etc/init.d/localmount - оригинал </para>
<para>...</para>
<para>mount -at ... &gt;/dev/null</para>
<para>...                 </para>
<para>Файл: /etc/init.d/localmount - замена </para>
<para>...</para>
<para>mount -aFt ... &gt;/dev/null</para>
<para>... </para>
<para/></section></section></section>
</article>